// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AddOrUpdateSubscription defines model for AddOrUpdateSubscription.
type AddOrUpdateSubscription struct {
	EndDate     *openapi_types.Date `json:"end_date"`
	Price       int64               `json:"price"`
	ServiceName string              `json:"service_name"`
	StartDate   openapi_types.Date  `json:"start_date"`
	UserId      openapi_types.UUID  `json:"user_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	EndDate     *openapi_types.Date `json:"end_date"`
	Id          openapi_types.UUID  `json:"id"`
	Price       int64               `json:"price"`
	ServiceName string              `json:"service_name"`
	StartDate   openapi_types.Date  `json:"start_date"`
	UserId      openapi_types.UUID  `json:"user_id"`
}

// TotalCostResponse defines model for TotalCostResponse.
type TotalCostResponse struct {
	TotalCost *int64 `json:"total_cost,omitempty"`
}

// GetSubscriptionsTotalCostParams defines parameters for GetSubscriptionsTotalCost.
type GetSubscriptionsTotalCostParams struct {
	UserId      openapi_types.UUID  `form:"user_id" json:"user_id"`
	ServiceName string              `form:"service_name" json:"service_name"`
	StartDate   *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate     *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = AddOrUpdateSubscription

// PatchSubscriptionsIdJSONRequestBody defines body for PatchSubscriptionsId for application/json ContentType.
type PatchSubscriptionsIdJSONRequestBody = AddOrUpdateSubscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all subscriptions
	// (GET /subscriptions)
	GetSubscriptions(ctx echo.Context) error
	// Add a new subscription
	// (POST /subscriptions)
	PostSubscriptions(ctx echo.Context) error
	// Calculate total cost of subscriptions
	// (GET /subscriptions/total-cost)
	GetSubscriptionsTotalCost(ctx echo.Context, params GetSubscriptionsTotalCostParams) error
	// Delete subscription
	// (DELETE /subscriptions/{id})
	DeleteSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error
	// Get subscription by ID
	// (GET /subscriptions/{id})
	GetSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error
	// Update subscription
	// (PATCH /subscriptions/{id})
	PatchSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSubscriptions(ctx)
	return err
}

// PostSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostSubscriptions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSubscriptions(ctx)
	return err
}

// GetSubscriptionsTotalCost converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptionsTotalCost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsTotalCostParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "service_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "service_name", ctx.QueryParams(), &params.ServiceName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_name: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSubscriptionsTotalCost(ctx, params)
	return err
}

// DeleteSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSubscriptionsId(ctx, id)
	return err
}

// GetSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSubscriptionsId(ctx, id)
	return err
}

// PatchSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSubscriptionsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/subscriptions", wrapper.GetSubscriptions)
	router.POST(baseURL+"/subscriptions", wrapper.PostSubscriptions)
	router.GET(baseURL+"/subscriptions/total-cost", wrapper.GetSubscriptionsTotalCost)
	router.DELETE(baseURL+"/subscriptions/:id", wrapper.DeleteSubscriptionsId)
	router.GET(baseURL+"/subscriptions/:id", wrapper.GetSubscriptionsId)
	router.PATCH(baseURL+"/subscriptions/:id", wrapper.PatchSubscriptionsId)

}

type GetSubscriptionsRequestObject struct {
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500JSONResponse ErrorResponse

func (response GetSubscriptions500JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptionsRequestObject struct {
	Body *PostSubscriptionsJSONRequestBody
}

type PostSubscriptionsResponseObject interface {
	VisitPostSubscriptionsResponse(w http.ResponseWriter) error
}

type PostSubscriptions201JSONResponse Subscription

func (response PostSubscriptions201JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptions400JSONResponse ErrorResponse

func (response PostSubscriptions400JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptions500JSONResponse ErrorResponse

func (response PostSubscriptions500JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCostRequestObject struct {
	Params GetSubscriptionsTotalCostParams
}

type GetSubscriptionsTotalCostResponseObject interface {
	VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error
}

type GetSubscriptionsTotalCost200JSONResponse TotalCostResponse

func (response GetSubscriptionsTotalCost200JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCost400JSONResponse ErrorResponse

func (response GetSubscriptionsTotalCost400JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCost500JSONResponse ErrorResponse

func (response GetSubscriptionsTotalCost500JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteSubscriptionsIdResponseObject interface {
	VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error
}

type DeleteSubscriptionsId204Response struct {
}

func (response DeleteSubscriptionsId204Response) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscriptionsId404JSONResponse ErrorResponse

func (response DeleteSubscriptionsId404JSONResponse) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionsId500JSONResponse ErrorResponse

func (response DeleteSubscriptionsId500JSONResponse) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetSubscriptionsIdResponseObject interface {
	VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error
}

type GetSubscriptionsId200JSONResponse Subscription

func (response GetSubscriptionsId200JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsId404JSONResponse ErrorResponse

func (response GetSubscriptionsId404JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsId500JSONResponse ErrorResponse

func (response GetSubscriptionsId500JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchSubscriptionsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchSubscriptionsIdJSONRequestBody
}

type PatchSubscriptionsIdResponseObject interface {
	VisitPatchSubscriptionsIdResponse(w http.ResponseWriter) error
}

type PatchSubscriptionsId200JSONResponse Subscription

func (response PatchSubscriptionsId200JSONResponse) VisitPatchSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchSubscriptionsId400JSONResponse ErrorResponse

func (response PatchSubscriptionsId400JSONResponse) VisitPatchSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchSubscriptionsId404JSONResponse ErrorResponse

func (response PatchSubscriptionsId404JSONResponse) VisitPatchSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchSubscriptionsId500JSONResponse ErrorResponse

func (response PatchSubscriptionsId500JSONResponse) VisitPatchSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all subscriptions
	// (GET /subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Add a new subscription
	// (POST /subscriptions)
	PostSubscriptions(ctx context.Context, request PostSubscriptionsRequestObject) (PostSubscriptionsResponseObject, error)
	// Calculate total cost of subscriptions
	// (GET /subscriptions/total-cost)
	GetSubscriptionsTotalCost(ctx context.Context, request GetSubscriptionsTotalCostRequestObject) (GetSubscriptionsTotalCostResponseObject, error)
	// Delete subscription
	// (DELETE /subscriptions/{id})
	DeleteSubscriptionsId(ctx context.Context, request DeleteSubscriptionsIdRequestObject) (DeleteSubscriptionsIdResponseObject, error)
	// Get subscription by ID
	// (GET /subscriptions/{id})
	GetSubscriptionsId(ctx context.Context, request GetSubscriptionsIdRequestObject) (GetSubscriptionsIdResponseObject, error)
	// Update subscription
	// (PATCH /subscriptions/{id})
	PatchSubscriptionsId(ctx context.Context, request PatchSubscriptionsIdRequestObject) (PatchSubscriptionsIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(ctx echo.Context) error {
	var request GetSubscriptionsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx.Request().Context(), request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		return validResponse.VisitGetSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSubscriptions operation middleware
func (sh *strictHandler) PostSubscriptions(ctx echo.Context) error {
	var request PostSubscriptionsRequestObject

	var body PostSubscriptionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSubscriptions(ctx.Request().Context(), request.(PostSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSubscriptionsResponseObject); ok {
		return validResponse.VisitPostSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSubscriptionsTotalCost operation middleware
func (sh *strictHandler) GetSubscriptionsTotalCost(ctx echo.Context, params GetSubscriptionsTotalCostParams) error {
	var request GetSubscriptionsTotalCostRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptionsTotalCost(ctx.Request().Context(), request.(GetSubscriptionsTotalCostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptionsTotalCost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSubscriptionsTotalCostResponseObject); ok {
		return validResponse.VisitGetSubscriptionsTotalCostResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSubscriptionsId operation middleware
func (sh *strictHandler) DeleteSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscriptionsId(ctx.Request().Context(), request.(DeleteSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSubscriptionsIdResponseObject); ok {
		return validResponse.VisitDeleteSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSubscriptionsId operation middleware
func (sh *strictHandler) GetSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error {
	var request GetSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptionsId(ctx.Request().Context(), request.(GetSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSubscriptionsIdResponseObject); ok {
		return validResponse.VisitGetSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchSubscriptionsId operation middleware
func (sh *strictHandler) PatchSubscriptionsId(ctx echo.Context, id openapi_types.UUID) error {
	var request PatchSubscriptionsIdRequestObject

	request.Id = id

	var body PatchSubscriptionsIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchSubscriptionsId(ctx.Request().Context(), request.(PatchSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchSubscriptionsIdResponseObject); ok {
		return validResponse.VisitPatchSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
